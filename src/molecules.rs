//! # Currency Molecules & Utilities
//!
//! This module defines the core metabolic "currencies" of the simulation as Bevy `Resources`.
//! These resources act as global pools that different metabolic blocks can draw from and contribute to.
//!
//! Based on the design documents (`AGENTS.md`, `Summary.md`), the primary currencies are:
//! - **ATP**: The main energy currency.
//! - **ReducingPower**: Represents NADH, NADPH, etc., used in biosynthesis.
//! - **AcetylCoA**: A key carbon carrier for lipid synthesis and the TCA cycle.
//! - **CarbonSkeletons**: Precursor molecules for amino acids and nucleotides.
//!
//! This module provides:
//! 1.  The `Resource` structs for each currency.
//! 2.  A `CurrencyPlugin` to initialize these resources in the Bevy app.
//! 3.  A generic `try_consume_currency` utility function for metabolic blocks to safely
//!     request and consume from the currency pools.

use bevy::prelude::*;
use tracing::{debug, warn};

// --- Currency Resource Definitions ---

/// **ATP (Adenosine Triphosphate)**
/// The primary energy currency, consumed by almost all metabolic processes.
/// Generated by Light Capture, Respiration, and Fermentation.
#[derive(Resource, Debug, Default)]
pub struct ATP(pub f32);

/// **Reducing Power (NADH, NADPH, etc.)**
/// Represents the pool of electron carriers used for biosynthesis and respiration.
/// Generated by catabolic pathways and light capture.
#[derive(Resource, Debug, Default)]
pub struct ReducingPower(pub f32);

/// **Acetyl-CoA**
/// A central metabolite linking sugar catabolism with the TCA cycle and lipid synthesis.
#[derive(Resource, Debug, Default)]
pub struct AcetylCoA(pub f32);

/// **Carbon Skeletons**
/// A generic pool of precursor molecules (e.g., from glycolysis or the TCA cycle)
/// used for building amino acids, nucleotides, and other complex molecules.
#[derive(Resource, Debug, Default)]
pub struct CarbonSkeletons(pub f32);

// --- Currency Trait & Implementations ---

/// A trait for generic operations on currency resources.
/// This allows the `try_consume_currency` function to work with any currency type.
pub trait Currency: Resource + Default + std::fmt::Debug {
    /// Returns the current amount of the currency.
    fn amount(&self) -> f32;
    /// Sets the amount of the currency.
    fn set_amount(&mut self, value: f32);
}

impl Currency for ATP {
    fn amount(&self) -> f32 {
        self.0
    }
    fn set_amount(&mut self, value: f32) {
        self.0 = value;
    }
}

impl Currency for ReducingPower {
    fn amount(&self) -> f32 {
        self.0
    }
    fn set_amount(&mut self, value: f32) {
        self.0 = value;
    }
}

impl Currency for AcetylCoA {
    fn amount(&self) -> f32 {
        self.0
    }
    fn set_amount(&mut self, value: f32) {
        self.0 = value;
    }
}

impl Currency for CarbonSkeletons {
    fn amount(&self) -> f32 {
        self.0
    }
    fn set_amount(&mut self, value: f32) {
        self.0 = value;
    }
}

// --- Plugin for Initialization ---

/// A Bevy `Plugin` that initializes all the currency resources.
/// Add this plugin to your `App` to make the currencies available to all systems.
pub struct CurrencyPlugin;

impl Plugin for CurrencyPlugin {
    fn build(&self, app: &mut App) {
        app.init_resource::<ATP>()
            .init_resource::<ReducingPower>()
            .init_resource::<AcetylCoA>()
            .init_resource::<CarbonSkeletons>();

        debug!("CurrencyPlugin loaded: Initialized ATP, ReducingPower, AcetylCoA, and CarbonSkeletons resources.");
    }
}

// --- Utility Functions for Consumption ---

/// Attempts to consume a specified `amount` of a given currency `T`.
///
/// This function is intended to be called from within a metabolic block's system.
/// It handles checking for sufficient funds and provides debug logging for traceability.
///
/// # Arguments
/// * `currency`: A `ResMut<T>` of the currency to consume.
/// * `amount`: The `f32` amount to attempt to consume. Must be non-negative.
/// * `consumer_name`: A string slice identifying the block or process attempting the consumption,
///   used for logging purposes (e.g., "Glycolysis").
///
/// # Returns
/// * `true` if the currency was successfully consumed.
/// * `false` if the requested amount was greater than the available currency.
///
/// # Example
/// ```rust,ignore
/// fn glycolysis_system(mut atp: ResMut<ATP>) {
///     // Glycolysis requires an initial investment of ATP.
///     if try_consume_currency(atp, 2.0, "Glycolysis") {
///         // Proceed with the rest of the glycolysis logic...
///         info!("Glycolysis started successfully.");
///     } else {
///         // Not enough ATP to start glycolysis.
///         warn!("Glycolysis stalled: Insufficient ATP.");
///     }
/// }
/// ```
pub fn try_consume_currency<T: Currency>(
    mut currency: ResMut<T>,
    amount: f32,
    consumer_name: &str,
) -> bool {
    if amount < 0.0 {
        warn!(
            "Attempted to consume a negative amount of currency by '{}'. This is not allowed.",
            consumer_name
        );
        return false;
    }

    let available = currency.amount();
    let currency_name = std::any::type_name::<T>().split("::").last().unwrap_or("UnknownCurrency");

    if available >= amount {
        debug!(
            "CONSUMPTION: '{}' consumed {:.2} {}. (Available: {:.2} -> {:.2})",
            consumer_name,
            amount,
            currency_name,
            available,
            available - amount
        );
        currency.set_amount(available - amount);
        true
    } else {
        debug!(
            "CONSUMPTION_FAILED: '{}' requires {:.2} {}, but only {:.2} is available.",
            consumer_name, amount, currency_name, available
        );
        false
    }
}